# -*- coding: utf-8 -*-
"""SackTrack Pro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mgEb4QH0mF0v25wZvR4aYMC2F70Fz4Q9
"""

# Constants
COST_CEMENT = 3
COST_GRAVEL = 2
COST_SAND = 2
DISCOUNT_PACK_PRICE = 10
DISCOUNT_PACK_CONTENTS = {'C': 1, 'G': 2, 'S': 2}

# Function to check a single sack
def check_single_sack():
    sack_type = input("Enter the contents of the sack (C for cement, G for gravel, S for sand): ").upper()
    weight = float(input("Enter the weight of the sack in kilograms: "))

    # Check contents
    if sack_type not in {'C', 'G', 'S'}:
        print("Rejected: Invalid sack contents.")
        return "Rejected"

    # Check weight
    weight_range = (24.9, 25.1) if sack_type == 'C' else (49.9, 50.1)
    if not weight_range[0] < weight < weight_range[1]:
        print("Rejected: Invalid sack weight.")
        return "Rejected"

    print(f"Accepted: Sack contains {sack_type} and weighs {weight} kilograms.")
    return "Accepted"

# Function to check a customer's order
def check_customer_order():
    total_weight = 0
    rejected_sacks = 0

    num_cement = int(input("Enter the number of cement sacks: "))
    num_gravel = int(input("Enter the number of gravel sacks: "))
    num_sand = int(input("Enter the number of sand sacks: "))

    for _ in range(num_cement):
        result = check_single_sack()
        if result == "Rejected":
            rejected_sacks += 1
        else:
            total_weight += 25  # Assuming weight for cement is 25 kg

    for _ in range(num_gravel):
        result = check_single_sack()
        if result == "Rejected":
            rejected_sacks += 1
        else:
            total_weight += 50  # Assuming weight for gravel is 50 kg

    for _ in range(num_sand):
        result = check_single_sack()
        if result == "Rejected":
            rejected_sacks += 1
        else:
            total_weight += 50  # Assuming weight for sand is 50 kg

    print(f"Total weight of the order: {total_weight} kilograms.")
    print(f"Number of rejected sacks: {rejected_sacks}")

    return total_weight, rejected_sacks

# Function to calculate the price for a customer's order
def calculate_order_price(total_weight, rejected_sacks):
    regular_price = COST_CEMENT * total_weight / 25 + COST_GRAVEL * total_weight / 50 + COST_SAND * total_weight / 50

    num_discount_packs = min(
        rejected_sacks // DISCOUNT_PACK_CONTENTS['C'],
        (rejected_sacks // DISCOUNT_PACK_CONTENTS['S']) // 2,
        (rejected_sacks // DISCOUNT_PACK_CONTENTS['G']) // 2
    )

    discount_price = num_discount_packs * DISCOUNT_PACK_PRICE
    new_price = regular_price - discount_price

    print(f"Regular price for the order: ${regular_price:.2f}")
    if num_discount_packs > 0:
        print(f"Discount price applied for {num_discount_packs} special packs: -${discount_price:.2f}")
        print(f"New price for the order: ${new_price:.2f}")
        print(f"Amount saved: ${discount_price:.2f}")
    else:
        print("No discount applied.")

# Main program
def main():
    print("TASK 1 - Check the contents and weight of a single sack")
    check_single_sack()

    print("\nTASK 2 - Check a customer’s order for delivery")
    total_weight, rejected_sacks = check_customer_order()

    print("\nTASK 3 - Calculate the price for a customer’s order")
    calculate_order_price(total_weight, rejected_sacks)

if __name__ == "__main__":
    main()

